from selenium import webdriver
from selenium.webdriver import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import pandas as pd
import time
import os
import glob
import re
from datetime import datetime
from tkinter import Tk, filedialog, messagebox
import sys


class EgrulDownloader:
    def __init__(self):
        self.browser = None
        self.wait = None
        self.download_folder = self.get_downloads_folder()
        self.stats = {
            'total': 0,
            'success': 0,
            'failed': 0,
            'skipped': 0
        }

    def print_header(self):
        """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("=" * 70)
        print("üè¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–´–ü–ò–°–û–ö –ò–ó –ï–ì–†–Æ–õ üè¢".center(70))
        print("=" * 70)
        print("üìã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤—ã–ø–∏—Å–∫–∏ –ø–æ —Å–ø–∏—Å–∫—É –ò–ù–ù")
        print("üìÅ –§–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é—Ç—Å—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏")
        print("=" * 70)

    def print_separator(self, char="‚îÄ", length=50):
        """–ü–µ—á–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è"""
        print(char * length)

    def print_step(self, step_num, total_steps, description):
        """–ü–µ—á–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞"""
        print(f"\nüìå –®–∞–≥ {step_num}/{total_steps}: {description}")
        self.print_separator()

    def print_progress(self, current, total, company_name=""):
        """–ü–µ—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        percentage = (current / total) * 100
        bar_length = 30
        filled_length = int(bar_length * current // total)
        bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)

        print(f"\rüîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: [{bar}] {percentage:.1f}% ({current}/{total})", end="")
        if company_name:
            print(f" | {company_name[:30]}...", end="" if len(company_name) > 30 else "")
        print("")

    def print_stats(self):
        """–ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['success']}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {self.stats['failed']}")
        print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.stats['skipped']}")
        print(f"   üìà –í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π: {self.stats['total']}")

        if self.stats['total'] > 0:
            success_rate = (self.stats['success'] / self.stats['total']) * 100
            print(f"   üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")

    def get_downloads_folder(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫"""
        return os.path.join(os.path.expanduser('~'), 'Downloads')

    def clean_filename(self, filename):
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        invalid_chars = r'[<>:"/\\|?*]'
        clean_name = re.sub(invalid_chars, '', filename)
        clean_name = clean_name.strip()

        if not clean_name:
            clean_name = "–ö–æ–º–ø–∞–Ω–∏—è"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if len(clean_name) > 100:
            clean_name = clean_name[:100]

        return clean_name

    def rename_latest_file(self, company_name):
        """–ü–æ–∏—Å–∫ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        safe_name = self.clean_filename(company_name)
        pdf_files = glob.glob(os.path.join(self.download_folder, '*.pdf'))

        if not pdf_files:
            return False, "PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        latest_file = max(pdf_files, key=os.path.getctime)
        new_filename = f"{safe_name}.pdf"
        new_path = os.path.join(self.download_folder, new_filename)

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º timestamp
        if os.path.exists(new_path):
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            new_filename = f"{safe_name}_{timestamp}.pdf"
            new_path = os.path.join(self.download_folder, new_filename)

        try:
            os.rename(latest_file, new_path)
            return True, new_filename
        except Exception as e:
            return False, str(e)

    def normalize_inn(self, inn_value):
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ò–ù–ù"""
        if pd.isna(inn_value):
            return None

        inn_str = str(inn_value).strip()
        inn_digits = re.sub(r'\D', '', inn_str)

        if len(inn_digits) < 10:
            inn_digits = inn_digits.zfill(10)
        elif len(inn_digits) < 12 and len(inn_digits) > 10:
            inn_digits = inn_digits.zfill(12)

        return inn_digits

    def select_excel_file(self):
        """–í—ã–±–æ—Ä Excel —Ñ–∞–π–ª–∞"""
        self.print_step(1, 4, "–í—ã–±–æ—Ä Excel —Ñ–∞–π–ª–∞")

        root = Tk()
        root.withdraw()

        print("üìÇ –û—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ Excel —Ñ–∞–π–ª–∞...")
        excel_file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏–π",
            filetypes=[
                ("Excel files", "*.xlsx"),
                ("Excel files", "*.xls"),
                ("All files", "*.*")
            ]
        )

        if not excel_file_path:
            print("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return None

        print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(excel_file_path)}")
        print(f"üìç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {excel_file_path}")
        return excel_file_path

    def process_excel_file(self, excel_file_path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞"""
        self.print_step(2, 4, "–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞")

        try:
            print("üìñ –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞...")
            df = pd.read_excel(excel_file_path, header=None, dtype=str)

            print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")

            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
            df.columns = ['company_name', 'inn'] + [f'col_{i}' for i in range(2, len(df.columns))]

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            print("üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
            df['company_name'] = df['company_name'].apply(lambda x: str(x).strip('\'"') if pd.notna(x) else x)
            df['inn'] = df['inn'].apply(self.normalize_inn)

            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
            df_filtered = df.dropna(subset=['company_name', 'inn'])
            removed_rows = len(df) - len(df_filtered)

            if removed_rows > 0:
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {removed_rows} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫")

            company_data = list(zip(df_filtered['company_name'], df_filtered['inn']))

            print(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(company_data)} –∫–æ–º–ø–∞–Ω–∏–π")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            print("\nüëÄ –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
            for i, (name, inn) in enumerate(company_data[:5], 1):
                print(f"   {i}. {name[:50]}{'...' if len(name) > 50 else ''} (–ò–ù–ù: {inn})")

            if len(company_data) > 5:
                print(f"   ... –∏ –µ—â–µ {len(company_data) - 5} –∑–∞–ø–∏—Å–µ–π")

            return company_data

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
            print("   ‚Ä¢ –§–∞–π–ª –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç .xlsx –∏–ª–∏ .xls")
            print("   ‚Ä¢ –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π")
            print("   ‚Ä¢ –í—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü —Å–æ–¥–µ—Ä–∂–∏—Ç –ò–ù–ù")
            return None

    def confirm_processing(self, company_data):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.print_step(3, 4, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

        print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(company_data)}")
        print(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {self.download_folder}")
        print(f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {len(company_data) * 8} —Å–µ–∫—É–Ω–¥")

        self.print_separator()

        while True:
            confirm = input("‚ùì –ù–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—ã–ø–∏—Å–æ–∫? (–¥–∞/–Ω–µ—Ç/–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫): ").lower().strip()

            if confirm in ['–¥–∞', '–¥', 'yes', 'y']:
                return True
            elif confirm in ['–Ω–µ—Ç', '–Ω', 'no', 'n']:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                return False
            elif confirm in ['–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫', '—Å–ø–∏—Å–æ–∫', '–ø–æ–∫–∞–∑–∞—Ç—å', 'list']:
                print("\nüìã –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ö–û–ú–ü–ê–ù–ò–ô:")
                for i, (name, inn) in enumerate(company_data, 1):
                    print(f"   {i:3d}. {name} (–ò–ù–ù: {inn})")
                self.print_separator()
            else:
                print("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞', '–Ω–µ—Ç' –∏–ª–∏ '–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫'")

    def setup_browser(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        print("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞...")

        chrome_options = Options()
        # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        # chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        prefs = {
            "download.default_directory": self.download_folder,
            "download.prompt_for_download": False,
            "plugins.always_open_pdf_externally": True
        }
        chrome_options.add_experimental_option("prefs", prefs)

        try:
            self.browser = webdriver.Chrome(options=chrome_options)
            self.wait = WebDriverWait(self.browser, 15)
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Chrome –∏ ChromeDriver —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return False

    def process_companies(self, company_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π"""
        self.print_step(4, 4, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—ã–ø–∏—Å–æ–∫")

        self.stats['total'] = len(company_data)

        print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(company_data)} –∫–æ–º–ø–∞–Ω–∏–π...")
        start_time = time.time()

        for i, (name, inn) in enumerate(company_data, 1):
            try:
                self.print_progress(i, len(company_data), name)

                print(f"\nüè¢ [{i}/{len(company_data)}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {name}")
                print(f"üÜî –ò–ù–ù: {inn}")

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
                print("   üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç –ï–ì–†–Æ–õ...")
                self.browser.get("https://egrul.nalog.ru/index.html")

                # –ü–æ–∏—Å–∫
                print("   üîç –ü–æ–∏—Å–∫ –ø–æ –ò–ù–ù...")
                search_box = self.wait.until(EC.presence_of_element_located((By.ID, "query")))
                search_box.clear()
                search_box.send_keys(inn)
                search_box.send_keys(Keys.RETURN)

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–∏—Å–∫–∏
                print("   üìÑ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–∏—Å–∫–∏...")
                button = self.wait.until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "button.btn-with-icon.btn-excerpt.op-excerpt"))
                )
                button.click()

                # –û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                print("   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
                time.sleep(6)

                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                print("   üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
                success, result = self.rename_latest_file(name)

                if success:
                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {result}")
                    self.stats['success'] += 1
                else:
                    print(f"   ‚ö†Ô∏è –§–∞–π–ª —Å–∫–∞—á–∞–Ω, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {result}")
                    self.stats['success'] += 1

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                self.stats['failed'] += 1

                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                time.sleep(2)

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        elapsed_time = time.time() - start_time

        print(f"\nüèÅ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥")
        self.print_stats()

        if self.stats['success'] > 0:
            print(f"\nüìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.download_folder}")

    def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
        try:
            self.print_header()

            # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
            excel_file_path = self.select_excel_file()
            if not excel_file_path:
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel
            company_data = self.process_excel_file(excel_file_path)
            if not company_data:
                return

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if not self.confirm_processing(company_data):
                return

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            if not self.setup_browser():
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
            self.process_companies(company_data)

        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            if self.browser:
                print("\nüîí –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
                self.browser.quit()

            print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            input()


if __name__ == "__main__":
    downloader = EgrulDownloader()
    downloader.run()